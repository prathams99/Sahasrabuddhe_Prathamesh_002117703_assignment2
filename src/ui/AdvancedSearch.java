/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import utils.CarManager;
import static utils.CarManager.getCarList;
import utils.CarProperties;

/**
 *
 * @author prath
 */
public class AdvancedSearch extends javax.swing.JFrame {

    private CarManager carManager;
    private List<CarProperties> carList;
    
    /**
     * Creates new form ViewCar
     */
    public AdvancedSearch(List<CarProperties> carList) {
        this.carManager = getCarList();
        this.carList = carList;
        initComponents();
        initImage();
        fillData();
    }
    
    /**
     * Creates new form AdvancedSearch
     */
    public AdvancedSearch() {
        initComponents();
        initImage();
        fillData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        advancedSearchTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        minInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        maxInput = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        serialInput = new javax.swing.JTextField();
        serialSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        modelInput = new javax.swing.JTextField();
        modelSearch = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        serialInput1 = new javax.swing.JTextField();
        certifiedCar = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        advancedSearchTable.setBackground(new java.awt.Color(0, 153, 153));
        advancedSearchTable.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 102, 102)));
        advancedSearchTable.setForeground(new java.awt.Color(255, 255, 255));
        advancedSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Brand", "Model", "Serial No", "Max Seats", "Min Seats", "Location", "Year", "Available", "Certificate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        advancedSearchTable.setShowGrid(true);
        jScrollPane1.setViewportView(advancedSearchTable);

        jLabel1.setFont(new java.awt.Font("Sitka Text", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Advanced Search");

        backButton.setBackground(new java.awt.Color(153, 204, 255));
        backButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        backButton.setText("<-- Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Minimum Seats");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Maximum Seats");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Serial Number");

        serialSearch.setText("Search");
        serialSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialSearchActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Model Name");

        modelSearch.setText("Search");
        modelSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelSearchActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Maintenance Certificate");

        certifiedCar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        certifiedCar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Certified", "Not certified" }));
        certifiedCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                certifiedCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(148, 148, 148)
                                .addComponent(jLabel6))
                            .addComponent(serialInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(minInput, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(maxInput, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(144, 144, 144)
                                        .addComponent(certifiedCar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(modelInput, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                            .addComponent(modelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(serialInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                    .addComponent(serialSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(45, 45, 45))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(45, 45, 45)
                        .addComponent(serialInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(serialSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serialInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(certifiedCar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        super.dispose();
        SearchCars searchPanel = new SearchCars(carList);
        searchPanel.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List<CarProperties> tempList = new ArrayList<CarProperties>();
        int minCount;
        int maxCount;
        
        minCount = Integer.parseInt(minInput.getText());
        maxCount = Integer.parseInt(maxInput.getText());
        
         for(CarProperties car: carList){
            if(car.getCarMinSeats() >= minCount  && car.getCarMaxSeats() <= maxCount){
                tempList.add(car);
            }
            
        }
        
        DefaultTableModel dtm = (DefaultTableModel) advancedSearchTable.getModel();
        dtm.setRowCount(0); 
        for(CarProperties car : tempList){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = car.getBrandName();
            row[1] = car.getModelName();
            row[2] = car.getCarSerialNumber();
            row[3] = car.getCarMaxSeats();
            row[4] = car.getCarMinSeats();
            row[5] = car.getCarCity();
            row[6] = car.getCarYear();
            row[7] = "Available";//setAvailable();
            row[8] = "Certified";//setCertificate();
            dtm.addRow(row);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void serialSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialSearchActionPerformed
        List<CarProperties> tempSerial = new ArrayList<CarProperties>();
        int serialNumber;
        
        serialNumber = Integer.parseInt(serialInput.getText());
        
         for(CarProperties car: carList){
            if(serialNumber == car.getCarSerialNumber()){
                tempSerial.add(car);
            }
        }
        
        DefaultTableModel dtm = (DefaultTableModel) advancedSearchTable.getModel();
        dtm.setRowCount(0); 
        for(CarProperties car : tempSerial){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = car.getBrandName();
            row[1] = car.getModelName();
            row[2] = car.getCarSerialNumber();
            row[3] = car.getCarMaxSeats();
            row[4] = car.getCarMinSeats();
            row[5] = car.getCarCity();
            row[6] = car.getCarYear();
            row[7] = "Available";//setAvailable();
            row[8] = "Certified";//setCertificate();
            dtm.addRow(row);
        }
    }//GEN-LAST:event_serialSearchActionPerformed

    private void modelSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelSearchActionPerformed
        List<CarProperties> tempModel = new ArrayList<CarProperties>();
        String modelName;
        
        modelName = modelInput.getText();
        
         for(CarProperties car: carList){
            if(modelName == null ? car.getModelName() == null : modelName.equals(car.getModelName())){
                tempModel.add(car);
            }
        }
        
        DefaultTableModel dtm = (DefaultTableModel) advancedSearchTable.getModel();
        dtm.setRowCount(0); 
        for(CarProperties car : tempModel){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = car.getBrandName();
            row[1] = car.getModelName();
            row[2] = car.getCarSerialNumber();
            row[3] = car.getCarMaxSeats();
            row[4] = car.getCarMinSeats();
            row[5] = car.getCarCity();
            row[6] = car.getCarYear();
            row[7] = "Available";//setAvailable();
            row[8] = "Certified";//setCertificate();
            dtm.addRow(row);
        }
    }//GEN-LAST:event_modelSearchActionPerformed

    private void certifiedCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_certifiedCarActionPerformed
        List<CarProperties> modelList = new ArrayList<CarProperties>();
        modelList = searchModel(carList);
    }//GEN-LAST:event_certifiedCarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdvancedSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdvancedSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdvancedSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvancedSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdvancedSearch().setVisible(true);
            }
        });
    }

    private List<CarProperties> searchModel(List<CarProperties> carList) {
        List<CarProperties> certified = new ArrayList<CarProperties>();
        String modelString = "";
        String searchString = "";
        modelString = String.valueOf(certifiedCar.getItemAt(certifiedCar.getSelectedIndex()));
        searchString = certifiedCar.getItemAt(certifiedCar.getSelectedIndex());
        for (CarProperties car : carList) {
            if (!modelString.equals("All")) {
                if (car.isCarMaintenanceCertificate() && modelString.equals("Certified")) {
                    if (car.getBrandName().equals(searchString)) {
                        certified.add(car);
                    } else {
                        certified.add(car);
                    }
                }
            }
        }
        for (CarProperties car : carList) {
            if (modelString.equals("All")) {
                certified.add(car);
            }
        }
        for (CarProperties car : carList) {
            if (modelString.equals("Uncertified") && !car.isCarMaintenanceCertificate()) {
                if (car.getBrandName().equals(searchString)) {
                        certified.add(car);
                    } else {
                        certified.add(car);
                    }
            }
        }
        DefaultTableModel dtm = (DefaultTableModel) advancedSearchTable.getModel();
        dtm.setRowCount(0);
        for (CarProperties car : certified) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = car.getBrandName();
            row[1] = car.getModelName();
            row[2] = car.getCarSerialNumber();
            row[3] = car.getCarMaxSeats();
            row[4] = car.getCarMinSeats();
            row[5] = car.getCarCity();
            row[6] = car.getCarYear();

            dtm.addRow(row);
        }
        return certified;
    }
    
    private void initImage() {
        ImagePanel jPanel1 = new ImagePanel("src/assets/search2.jpg");
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }
    
    private void fillData() {
        DefaultTableModel dtm = (DefaultTableModel) advancedSearchTable.getModel();
        dtm.setRowCount(0);
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( SwingConstants.CENTER );
        advancedSearchTable.setDefaultRenderer(String.class, centerRenderer);
        
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) advancedSearchTable.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(0);
        
        for(int x=0; x < advancedSearchTable.getColumnCount(); x++){
         advancedSearchTable.getColumnModel().getColumn(x).setCellRenderer( centerRenderer );
        }
        
        for(CarProperties car : carList){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = car.getBrandName();
            row[1] = car.getModelName();
            row[2] = car.getCarSerialNumber();
            row[3] = car.getCarMaxSeats();
            row[4] = car.getCarMinSeats();
            row[5] = car.getCarCity();
            row[6] = car.getCarYear();
            row[7] = "Available";//setAvailable();
            row[8] = "Certified";//setCertificate();
            dtm.addRow(row);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable advancedSearchTable;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> certifiedCar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maxInput;
    private javax.swing.JTextField minInput;
    private javax.swing.JTextField modelInput;
    private javax.swing.JButton modelSearch;
    private javax.swing.JTextField serialInput;
    private javax.swing.JTextField serialInput1;
    private javax.swing.JButton serialSearch;
    // End of variables declaration//GEN-END:variables
}
